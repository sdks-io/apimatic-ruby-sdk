# apimatic_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ApimaticApi
  # ApisManagementController
  class ApisManagementController < BaseController
    # Import an API into the APIMatic Dashboard by uploading the API
    # specification file.
    # You can also specify [API
    # Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
    # importing the API using this endpoint. When specifying Metadata, the
    # uploaded file will be a zip file containing the API specification file and
    # the `APIMATIC-META` json file.
    # @param [File | UploadIO] file Required parameter: The API specification
    # file.<br>The type of the specification file should be any of the
    # [supported
    # formats](https://docs.apimatic.io/api-transformer/overview-transformer#sup
    # ported-input-formats).
    # @return [ApiEntity] response from the API call
    def import_api_via_file(file)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api-entities/import-via-file',
                                     Server::DEFAULT)
                   .multipart_param(new_parameter(file, key: 'file')
                                     .default_content_type('application/octet-stream'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ApiEntity.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                APIException)
                   .local_error('412',
                                'Precondition Failed',
                                APIException)
                   .local_error('422',
                                'Unprocessable Entity',
                                APIException)
                   .local_error('500',
                                'Internal Server Error',
                                APIException))
        .execute
    end

    # Import an API into the APIMatic Dashboard by providing the URL of the API
    # specification file.
    # You can also specify [API
    # Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
    # importing the API using this endpoint. When specifying Metadata, the URL
    # provided will be that of a zip file containing the API specification file
    # and the `APIMATIC-META` json file.
    # @param [ImportApiViaUrlRequest] body Required parameter: Request Body
    # @return [ApiEntity] response from the API call
    def import_api_via_url(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api-entities/import-via-url',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/vnd.apimatic.apiEntityUrlImportDto.v1+json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ApiEntity.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                APIException)
                   .local_error('412',
                                'Precondition Failed',
                                APIException)
                   .local_error('422',
                                'Unprocessable Entity',
                                APIException)
                   .local_error('500',
                                'Internal Server Error',
                                APIException))
        .execute
    end

    # Import a new version for an API, against an existing API Group, by
    # uploading the API specification file.
    # You can also specify [API
    # Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
    # importing the API version using this endpoint. When specifying Metadata,
    # the uploaded file will be a zip file containing the API specification file
    # and the `APIMATIC-META` json file.
    # @param [String] api_group_id Required parameter: The ID of the API Group
    # for which to import a new API version.
    # @param [String] version_override Required parameter: The version number
    # with which the new API version will be imported. This version number will
    # override the version specified in the API specification file.<br>APIMatic
    # recommends versioning the API with the [versioning
    # scheme](https://docs.apimatic.io/define-apis/basic-settings/#version)
    # documented in the docs.
    # @param [File | UploadIO] file Required parameter: The API specification
    # file.<br>The type of the specification file should be any of the
    # [supported
    # formats](https://docs.apimatic.io/api-transformer/overview-transformer#sup
    # ported-input-formats).
    # @return [ApiEntity] response from the API call
    def import_new_api_version_via_file(api_group_id,
                                        version_override,
                                        file)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api-groups/{api_group_id}/api-entities/import-via-file',
                                     Server::DEFAULT)
                   .template_param(new_parameter(api_group_id, key: 'api_group_id')
                                    .should_encode(true))
                   .form_param(new_parameter(version_override, key: 'version_override'))
                   .multipart_param(new_parameter(file, key: 'file')
                                     .default_content_type('application/octet-stream'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ApiEntity.method(:from_hash)))
        .execute
    end

    # Import a new version for an API, against an existing API Group, by
    # providing the URL of the API specification file.
    # You can also specify [API
    # Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
    # importing the API version using this endpoint. When specifying Metadata,
    # the URL provided will be that of a zip file containing the API
    # specification file and the `APIMATIC-META` json file.
    # @param [String] api_group_id Required parameter: The ID of the API Group
    # for which to import a new API version.
    # @param [ImportApiVersionViaUrlRequest] body Required parameter: Request
    # Body
    # @return [ApiEntity] response from the API call
    def import_new_api_version_via_url(api_group_id,
                                       body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api-groups/{api_group_id}/api-entities/import-via-url',
                                     Server::DEFAULT)
                   .template_param(new_parameter(api_group_id, key: 'api_group_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.apimatic.apiGroupApiEntityUrlImportDto.v1+json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ApiEntity.method(:from_hash)))
        .execute
    end

    # Replace an API version of an API Group, by uploading the API specification
    # file that will replace the current version.
    # You can also specify [API
    # Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
    # importing the API version using this endpoint. When specifying Metadata,
    # the uploaded file will be a zip file containing the API specification file
    # and the `APIMATIC-META` json file.
    # @param [String] api_entity_id Required parameter: The ID of the API Entity
    # to replace.
    # @param [File | UploadIO] file Required parameter: The API specification
    # file.<br>The type of the specification file should be any of the
    # [supported
    # formats](https://docs.apimatic.io/api-transformer/overview-transformer#sup
    # ported-input-formats).
    # @return [void] response from the API call
    def inplace_api_import_via_file(api_entity_id,
                                    file)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/api-entities/{api_entity_id}/import-via-file',
                                     Server::DEFAULT)
                   .template_param(new_parameter(api_entity_id, key: 'api_entity_id')
                                    .should_encode(true))
                   .multipart_param(new_parameter(file, key: 'file')
                                     .default_content_type('application/octet-stream'))
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .is_response_void(true))
        .execute
    end

    # Replace an API version of an API Group, by providing the URL of the API
    # specification file that will replace the current version.
    # You can also specify [API
    # Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
    # importing the API version using this endpoint. When specifying Metadata,
    # the URL provided will be that of a zip file containing the API
    # specification file and the `APIMATIC-META` json file.
    # @param [String] api_entity_id Required parameter: The ID of the API Entity
    # to replace.
    # @param [InplaceImportApiViaUrlRequest] body Required parameter: Request
    # Body
    # @return [void] response from the API call
    def inplace_api_import_via_url(api_entity_id,
                                   body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/api-entities/{api_entity_id}/import-via-url',
                                     Server::DEFAULT)
                   .template_param(new_parameter(api_entity_id, key: 'api_entity_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/vnd.apimatic.apiEntityUrlImportDto.v1+json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .is_response_void(true))
        .execute
    end

    # Fetch an API Entity.
    # @param [String] api_entity_id Required parameter: The ID of the API Entity
    # to fetch.
    # @return [ApiEntity] response from the API call
    def fetch_api_entity(api_entity_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api-entities/{api_entity_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(api_entity_id, key: 'api_entity_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ApiEntity.method(:from_hash)))
        .execute
    end

    # Download the API Specification file for a an API Version in any of the API
    # Specification formats supported by APIMatic.
    # @param [String] api_entity_id Required parameter: The ID of the API Entity
    # to download.
    # @param [ExportFormats] format Required parameter: The format in which to
    # download the API.<br>The format can be any of the [supported
    # formats](https://docs.apimatic.io/api-transformer/overview-transformer#sup
    # ported-input-formats).
    # @return [Binary] response from the API call
    def download_api_specification(api_entity_id,
                                   format)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/api-entities/{api_entity_id}/api-description',
                                     Server::DEFAULT)
                   .template_param(new_parameter(api_entity_id, key: 'api_entity_id')
                                    .should_encode(true))
                   .query_param(new_parameter(format, key: 'format'))
                   .auth(Single.new('Authorization')))
        .response(new_response_handler)
        .execute
    end
  end
end

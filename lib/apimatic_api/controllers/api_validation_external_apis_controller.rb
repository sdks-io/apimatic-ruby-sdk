# apimatic_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ApimaticApi
  # APIValidationExternalApisController
  class APIValidationExternalApisController < BaseController
    # Validate an API by uploading the API specification file.
    # You can also specify [API
    # Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
    # validating the API using this endpoint. When specifying Metadata, the
    # uploaded file will be a zip file containing the API specification file and
    # the `APIMATIC-META` json file.
    # @param [File | UploadIO] file Required parameter: The API specification
    # file.<br>The type of the specification file should be any of the
    # [supported
    # formats](https://docs.apimatic.io/api-transformer/overview-transformer#sup
    # ported-input-formats).
    # @return [ApiValidationSummary] response from the API call
    def validate_api_via_file(file)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/validation/validate-via-file',
                                     Server::DEFAULT)
                   .multipart_param(new_parameter(file, key: 'file')
                                     .default_content_type('application/octet-stream'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ApiValidationSummary.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                APIException)
                   .local_error('401',
                                'Unauthenticated',
                                APIException)
                   .local_error('403',
                                'Forbidden',
                                APIException)
                   .local_error('500',
                                'Internal Server Error',
                                APIException))
        .execute
    end

    # Validate an API by providing the URL of the API specification file.
    # You can also specify [API
    # Metadata](https://docs.apimatic.io/manage-apis/apimatic-metadata) while
    # validating the API using this endpoint. When specifying Metadata, the URL
    # provided will be that of a zip file containing the API specification file
    # and the `APIMATIC-META` json file.
    # @param [String] description_url Required parameter: The URL for the API
    # specification file.<br><br>**Note:** This URL should be publicly
    # accessible.
    # @return [ApiValidationSummary] response from the API call
    def validate_api_via_url(description_url)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/validation/validate-via-url',
                                     Server::DEFAULT)
                   .query_param(new_parameter(description_url, key: 'descriptionUrl'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('Authorization')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ApiValidationSummary.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                APIException)
                   .local_error('401',
                                'Unauthenticated',
                                APIException)
                   .local_error('403',
                                'Forbidden',
                                APIException)
                   .local_error('500',
                                'Internal Server Error',
                                APIException))
        .execute
    end
  end
end

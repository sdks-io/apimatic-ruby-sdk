# apimatic_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ApimaticApi
  # Server configurations can be used to create multiple environments, multiple
  # servers that can be used with specific endpoints and server URLs with
  # template paramters.
  class ServerConfiguration < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Server Config Identifier
    # @return [String]
    attr_accessor :id

    # Default Environment
    # @return [String]
    attr_accessor :default_environment

    # Default Server
    # @return [String]
    attr_accessor :default_server

    # Environment Identifier and Name
    # @return [Array[Environment]]
    attr_accessor :environments

    # Parameter Attributes
    # @return [Array[Parameter]]
    attr_accessor :parameters

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['default_environment'] = 'defaultEnvironment'
      @_hash['default_server'] = 'defaultServer'
      @_hash['environments'] = 'environments'
      @_hash['parameters'] = 'parameters'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil,
                   default_environment = nil,
                   default_server = nil,
                   environments = nil,
                   parameters = nil)
      @id = id
      @default_environment = default_environment
      @default_server = default_server
      @environments = environments
      @parameters = parameters
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      default_environment =
        hash.key?('defaultEnvironment') ? hash['defaultEnvironment'] : nil
      default_server = hash.key?('defaultServer') ? hash['defaultServer'] : nil
      # Parameter is an array, so we need to iterate through it
      environments = nil
      unless hash['environments'].nil?
        environments = []
        hash['environments'].each do |structure|
          environments << (Environment.from_hash(structure) if structure)
        end
      end

      environments = nil unless hash.key?('environments')
      # Parameter is an array, so we need to iterate through it
      parameters = nil
      unless hash['parameters'].nil?
        parameters = []
        hash['parameters'].each do |structure|
          parameters << (Parameter.from_hash(structure) if structure)
        end
      end

      parameters = nil unless hash.key?('parameters')

      # Create object from extracted values.
      ServerConfiguration.new(id,
                              default_environment,
                              default_server,
                              environments,
                              parameters)
    end
  end
end

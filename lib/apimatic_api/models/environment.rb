# apimatic_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ApimaticApi
  # An environment consists of a set of servers with base URL values. The
  # environment can be changed programatically allowing rapid switching between
  # different environments. For example the user can specify a Production and
  # Testing Environment and switch between them in the generated SDK.
  class Environment < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique Environment Identifier
    # @return [String]
    attr_accessor :id

    # Environment Name
    # @return [String]
    attr_accessor :name

    # The user can specify multiple servers within an environment. A server
    # comprises of a name and a url.
    # @return [Array[Server]]
    attr_accessor :servers

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['servers'] = 'servers'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil,
                   name = nil,
                   servers = nil)
      @id = id
      @name = name
      @servers = servers
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      name = hash.key?('name') ? hash['name'] : nil
      # Parameter is an array, so we need to iterate through it
      servers = nil
      unless hash['servers'].nil?
        servers = []
        hash['servers'].each do |structure|
          servers << (Server.from_hash(structure) if structure)
        end
      end

      servers = nil unless hash.key?('servers')

      # Create object from extracted values.
      Environment.new(id,
                      name,
                      servers)
    end
  end
end

# apimatic_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ApimaticApi
  # This structure helps specify additional test configurations which affects
  # how test cases are generated.
  class TestGenSettings < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Error margin for comparing values in decimal places
    # @return [Float]
    attr_accessor :precision_delta

    # Number of seconds after which if the endpoint is not returning any
    # response, the test is forced to fail e.g. a timeout of 60
    # @return [Integer]
    attr_accessor :test_timeout

    # The parameters allows to provide values for configuration file for use in
    # the test environment
    # @return [Object]
    attr_accessor :configuration

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['precision_delta'] = 'precisionDelta'
      @_hash['test_timeout'] = 'testTimeout'
      @_hash['configuration'] = 'configuration'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(precision_delta = nil,
                   test_timeout = nil,
                   configuration = nil)
      @precision_delta = precision_delta
      @test_timeout = test_timeout
      @configuration = configuration
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      precision_delta =
        hash.key?('precisionDelta') ? hash['precisionDelta'] : nil
      test_timeout = hash.key?('testTimeout') ? hash['testTimeout'] : nil
      configuration = hash.key?('configuration') ? hash['configuration'] : nil

      # Create object from extracted values.
      TestGenSettings.new(precision_delta,
                          test_timeout,
                          configuration)
    end
  end
end

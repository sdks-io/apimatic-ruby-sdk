# apimatic_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ApimaticApi
  # The API Entity Structure encapsulates all the details of an API Entity. An
  # API entity is a unique API Version.
  class ApiEntity < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique API Entity identifier
    # @return [String]
    attr_accessor :id

    # Enrcypted API Entity Id
    # @return [String]
    attr_accessor :encrypted_id

    # API Integration Key. Obtain from API Card on Dashboard.
    # @return [String]
    attr_accessor :api_key

    # Unique API Group Identifier
    # @return [String]
    attr_accessor :api_group_id

    # Cover Image
    # @return [String]
    attr_accessor :image_uri

    # Entity creation date
    # @return [String]
    attr_accessor :creation_date

    # API Status (Deprecated)
    # @return [TrueClass | FalseClass]
    attr_accessor :public

    # API Entity  Name
    # @return [String]
    attr_accessor :name

    # Description of the API
    # @return [String]
    attr_accessor :description

    # Entity Version Number
    # @return [String]
    attr_accessor :version

    # Header Content
    # @return [Array[String]]
    attr_accessor :additional_headers

    # This Structure encapsulates all details of API authentication.
    # @return [Authentication]
    attr_accessor :authentication

    # APIMaticâ€™s code generation engine has various code generation
    # configurations to customise the behaviour and outlook across the generated
    # SDKS. This structure encapsulates all settings for CodeGeneration.
    # @return [CodeGenSettings]
    attr_accessor :code_gen_settings

    # This structure helps specify additional test configurations which affects
    # how test cases are generated.
    # @return [TestGenSettings]
    attr_accessor :test_gen_settings

    # API Errors
    # @return [Array[String]]
    attr_accessor :errors

    # Server configurations can be used to create multiple environments,
    # multiple servers that can be used with specific endpoints and server URLs
    # with template paramters.
    # @return [ServerConfiguration]
    attr_accessor :server_configuration

    # API Endpoint Groups
    # @return [Array[EndpointsGroup]]
    attr_accessor :endpoints_group

    # API Endpoint Groups
    # @return [MetaData]
    attr_accessor :meta_data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['encrypted_id'] = 'encryptedId'
      @_hash['api_key'] = 'apiKey'
      @_hash['api_group_id'] = 'apiGroupId'
      @_hash['image_uri'] = 'imageUri'
      @_hash['creation_date'] = 'creationDate'
      @_hash['public'] = 'public'
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['version'] = 'version'
      @_hash['additional_headers'] = 'additionalHeaders'
      @_hash['authentication'] = 'authentication'
      @_hash['code_gen_settings'] = 'codeGenSettings'
      @_hash['test_gen_settings'] = 'testGenSettings'
      @_hash['errors'] = 'errors'
      @_hash['server_configuration'] = 'serverConfiguration'
      @_hash['endpoints_group'] = 'endpointsGroup'
      @_hash['meta_data'] = 'metaData'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil,
                   encrypted_id = nil,
                   api_key = nil,
                   api_group_id = nil,
                   image_uri = nil,
                   creation_date = nil,
                   public = nil,
                   name = nil,
                   description = nil,
                   version = nil,
                   additional_headers = nil,
                   authentication = nil,
                   code_gen_settings = nil,
                   test_gen_settings = nil,
                   errors = nil,
                   server_configuration = nil,
                   endpoints_group = nil,
                   meta_data = nil)
      @id = id
      @encrypted_id = encrypted_id
      @api_key = api_key
      @api_group_id = api_group_id
      @image_uri = image_uri
      @creation_date = creation_date
      @public = public
      @name = name
      @description = description
      @version = version
      @additional_headers = additional_headers
      @authentication = authentication
      @code_gen_settings = code_gen_settings
      @test_gen_settings = test_gen_settings
      @errors = errors
      @server_configuration = server_configuration
      @endpoints_group = endpoints_group
      @meta_data = meta_data
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      encrypted_id = hash.key?('encryptedId') ? hash['encryptedId'] : nil
      api_key = hash.key?('apiKey') ? hash['apiKey'] : nil
      api_group_id = hash.key?('apiGroupId') ? hash['apiGroupId'] : nil
      image_uri = hash.key?('imageUri') ? hash['imageUri'] : nil
      creation_date = hash.key?('creationDate') ? hash['creationDate'] : nil
      public = hash.key?('public') ? hash['public'] : nil
      name = hash.key?('name') ? hash['name'] : nil
      description = hash.key?('description') ? hash['description'] : nil
      version = hash.key?('version') ? hash['version'] : nil
      additional_headers =
        hash.key?('additionalHeaders') ? hash['additionalHeaders'] : nil
      authentication = Authentication.from_hash(hash['authentication']) if hash['authentication']
      code_gen_settings = CodeGenSettings.from_hash(hash['codeGenSettings']) if
        hash['codeGenSettings']
      test_gen_settings = TestGenSettings.from_hash(hash['testGenSettings']) if
        hash['testGenSettings']
      errors = hash.key?('errors') ? hash['errors'] : nil
      server_configuration = ServerConfiguration.from_hash(hash['serverConfiguration']) if
        hash['serverConfiguration']
      # Parameter is an array, so we need to iterate through it
      endpoints_group = nil
      unless hash['endpointsGroup'].nil?
        endpoints_group = []
        hash['endpointsGroup'].each do |structure|
          endpoints_group << (EndpointsGroup.from_hash(structure) if structure)
        end
      end

      endpoints_group = nil unless hash.key?('endpointsGroup')
      meta_data = MetaData.from_hash(hash['metaData']) if hash['metaData']

      # Create object from extracted values.
      ApiEntity.new(id,
                    encrypted_id,
                    api_key,
                    api_group_id,
                    image_uri,
                    creation_date,
                    public,
                    name,
                    description,
                    version,
                    additional_headers,
                    authentication,
                    code_gen_settings,
                    test_gen_settings,
                    errors,
                    server_configuration,
                    endpoints_group,
                    meta_data)
    end
  end
end

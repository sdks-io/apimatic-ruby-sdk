# apimatic_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ApimaticApi
  # This Structure encapsulates all details of API authentication.
  class Authentication < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Auth Id
    # @return [String]
    attr_accessor :id

    # Auth Type
    # @return [String]
    attr_accessor :auth_type

    # Scope
    # @return [Array[AuthScope]]
    attr_accessor :scopes

    # Auth Params
    # @return [Array[String]]
    attr_accessor :parameters

    # Auth Scopes
    # @return [Array[String]]
    attr_accessor :auth_scopes

    # Auth Grant Types
    # @return [Array[String]]
    attr_accessor :auth_grant_types

    # Paramater Formats
    # @return [Object]
    attr_accessor :param_formats

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['auth_type'] = 'authType'
      @_hash['scopes'] = 'scopes'
      @_hash['parameters'] = 'parameters'
      @_hash['auth_scopes'] = 'authScopes'
      @_hash['auth_grant_types'] = 'authGrantTypes'
      @_hash['param_formats'] = 'paramFormats'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil,
                   auth_type = nil,
                   scopes = nil,
                   parameters = nil,
                   auth_scopes = nil,
                   auth_grant_types = nil,
                   param_formats = nil)
      @id = id
      @auth_type = auth_type
      @scopes = scopes
      @parameters = parameters
      @auth_scopes = auth_scopes
      @auth_grant_types = auth_grant_types
      @param_formats = param_formats
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      auth_type = hash.key?('authType') ? hash['authType'] : nil
      # Parameter is an array, so we need to iterate through it
      scopes = nil
      unless hash['scopes'].nil?
        scopes = []
        hash['scopes'].each do |structure|
          scopes << (AuthScope.from_hash(structure) if structure)
        end
      end

      scopes = nil unless hash.key?('scopes')
      parameters = hash.key?('parameters') ? hash['parameters'] : nil
      auth_scopes = hash.key?('authScopes') ? hash['authScopes'] : nil
      auth_grant_types =
        hash.key?('authGrantTypes') ? hash['authGrantTypes'] : nil
      param_formats = hash.key?('paramFormats') ? hash['paramFormats'] : nil

      # Create object from extracted values.
      Authentication.new(id,
                         auth_type,
                         scopes,
                         parameters,
                         auth_scopes,
                         auth_grant_types,
                         param_formats)
    end
  end
end
